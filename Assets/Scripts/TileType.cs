//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18331
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class TileType
{
		private readonly ETileColor m_color;
		private readonly ETileIcon m_icon;

		public static TileType LoadFromValue (string p_value)
		{
				ETileColor color_type = Util.tryEnum<ETileColor> (p_value);
				if (color_type != ETileColor.NULL)
						return new TileType (color_type);
				ETileIcon icon_type = Util.tryEnum<ETileIcon> (p_value);
				if (icon_type != ETileIcon.NULL && icon_type != ETileIcon.NONE)
						return new TileType (icon_type);

				return null;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="TileType"/> class to represent color type
		/// </summary>
		/// <param name="p_color">P_color.</param>
		public TileType (ETileColor p_color)
		{
				m_color = p_color;
				m_icon = ETileIcon.NULL;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="TileType"/> class to represent icon type.
		/// </summary>
		/// <param name="p_icon">P_icon.</param>
		public TileType (ETileIcon p_icon)
		{
				m_color = ETileColor.NULL;
				m_icon = p_icon;
		}

		public ETileColor color {
				get {
						return m_color;
				}
		}

		public ETileIcon icon {
				get {
						return m_icon;
				}
		}

		public bool IsColor ()
		{
				return this.m_color != ETileColor.NULL;
		}

		public bool IsIcon ()
		{
				return this.m_icon != ETileIcon.NULL;
		}
}


