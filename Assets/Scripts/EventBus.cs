//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18331
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class EventBus
{
    public EventBus ()
    {
        m_handlers = new Dictionary<Type, List<IHandler>> ();
    }

    public abstract class Type
    {
        private static int m_nextHashCode = 0;
        private int m_index;
            
        public Type ()
        {
            m_index = m_nextHashCode++;
        }
            
        public override int  GetHashCode ()
        {
            return m_index;
        }
    }

    private Dictionary<Type, List<IHandler>> m_handlers;

    public void fireEvent<H> (IEvent<H> p_event)
            where H : class, IHandler
    {
        List<IHandler> list;
        // ------------------- DECLARE -------------------- //
        
        list = null;
        // --------------------- INIT --------------------- //
        
        if (m_handlers.ContainsKey (p_event.GetEventType()) == false) {
            return;
        }
        
        list = m_handlers [p_event.GetEventType ()];
        
        // Dispatch event among handler.
        foreach (var handler in list) {
            H _handler = handler as H;
            p_event.Dispatch (_handler);
        }
    
    }

    public void addHandler<H> (Type p_type, H p_handler)
        where H : class, IHandler
    {
        if (m_handlers.ContainsKey (p_type)) {
            m_handlers [p_type].Add (p_handler);
        } else {
            m_handlers [p_type] = new List<IHandler> ();
            m_handlers [p_type].Add (p_handler);
        }
    }
}


